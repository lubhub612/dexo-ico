{"ast":null,"code":"var _jsxFileName = \"E:\\\\New folder (44)\\\\ico-page-react\\\\src\\\\components\\\\Wallet\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { networkParams } from \"./networks\";\nimport { toHex, truncateAddress } from \"../../utils/addressUtils\";\nimport { ethers } from \"ethers\";\nimport Web3Modal from \"web3modal\";\nimport { providerOptions } from \"./providerOptions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst web3Modal = new Web3Modal({\n  cacheProvider: true,\n  // optional\n  providerOptions // required\n\n});\nexport default function Wallet(props) {\n  _s();\n\n  const [provider, setProvider] = useState();\n  const [library, setLibrary] = useState();\n  const [account, setAccount] = useState(props.account);\n  const [signature, setSignature] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [chainId, setChainId] = useState(props.chainId);\n  const [network, setNetwork] = useState();\n  const [message, setMessage] = useState(\"\");\n  const [signedMessage, setSignedMessage] = useState(\"\");\n  const [verified, setVerified] = useState();\n\n  const connectWallet = async () => {\n    try {\n      const provider = await web3Modal.connect();\n      const library = new ethers.providers.Web3Provider(provider);\n      const accounts = await library.listAccounts();\n      const network = await library.getNetwork();\n      setProvider(provider);\n      setLibrary(library);\n      if (accounts) setAccount(accounts[0]);\n      setChainId(network.chainId);\n    } catch (error) {\n      setError(error);\n    }\n  };\n\n  const handleNetwork = e => {\n    const id = e.target.value;\n    setNetwork(Number(id));\n  }; //   const handleInput = (e) => {\n  //     const msg = e.target.value;\n  //     setMessage(msg);\n  //   };\n\n\n  const switchNetwork = async () => {\n    const toNetworkId = 97;\n\n    try {\n      await library.provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: toHex(toNetworkId)\n        }]\n      });\n      setChainId(toNetworkId);\n    } catch (switchError) {\n      if (switchError.code === 4902) {\n        try {\n          await library.provider.request({\n            method: \"wallet_addEthereumChain\",\n            params: [networkParams[toHex(toNetworkId)]]\n          });\n        } catch (error) {\n          setError(error);\n        }\n      }\n    }\n  }; //   const signMessage = async () => {\n  //     if (!library) return;\n  //     try {\n  //       const signature = await library.provider.request({\n  //         method: \"personal_sign\",\n  //         params: [message, account]\n  //       });\n  //       setSignedMessage(message);\n  //       setSignature(signature);\n  //     } catch (error) {\n  //       setError(error);\n  //     }\n  //   };\n  //   const verifyMessage = async () => {\n  //     if (!library) return;\n  //     try {\n  //       const verify = await library.provider.request({\n  //         method: \"personal_ecRecover\",\n  //         params: [signedMessage, signature]\n  //       });\n  //       setVerified(verify === account.toLowerCase());\n  //     } catch (error) {\n  //       setError(error);\n  //     }\n  //   };\n\n\n  const refreshState = () => {\n    setAccount();\n    setChainId();\n    setNetwork(\"\");\n    setMessage(\"\");\n    setSignature(\"\");\n    setVerified(undefined);\n  };\n\n  const disconnect = async () => {\n    web3Modal.clearCachedProvider();\n    refreshState();\n  };\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      connectWallet();\n    }\n  }, []);\n  useEffect(() => {\n    props.setAccount(account);\n  }, [account]);\n  useEffect(() => {\n    props.setChainId(chainId);\n  }, [chainId]);\n  useEffect(() => {\n    if (provider !== null && provider !== void 0 && provider.on) {\n      const handleAccountsChanged = accounts => {\n        console.log(\"accountsChanged\", accounts);\n        if (accounts) setAccount(accounts[0]);\n      };\n\n      const handleChainChanged = _hexChainId => {\n        setChainId(_hexChainId);\n        console.log(\"Chain:\", chainId);\n      };\n\n      const handleDisconnect = () => {\n        console.log(\"disconnect\", error);\n        disconnect();\n      };\n\n      provider.on(\"accountsChanged\", handleAccountsChanged);\n      provider.on(\"chainChanged\", handleChainChanged);\n      provider.on(\"disconnect\", handleDisconnect);\n      return () => {\n        if (provider.removeListener) {\n          provider.removeListener(\"accountsChanged\", handleAccountsChanged);\n          provider.removeListener(\"chainChanged\", handleChainChanged);\n          provider.removeListener(\"disconnect\", handleDisconnect);\n        }\n      };\n    }\n  }, [provider]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !account ? /*#__PURE__*/_jsxDEV(\"a\", {\n      onClick: connectWallet,\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }, this) : chainId === 0x61 ? /*#__PURE__*/_jsxDEV(\"a\", {\n      onClick: disconnect,\n      children: \"Disconnect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"a\", {\n      onClick: switchNetwork,\n      children: \"Wrong Network\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Wallet, \"y9EGkOppmaSn5W6m3zTOJPN93pU=\");\n\n_c = Wallet;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wallet\");","map":{"version":3,"names":["useEffect","useState","networkParams","toHex","truncateAddress","ethers","Web3Modal","providerOptions","web3Modal","cacheProvider","Wallet","props","provider","setProvider","library","setLibrary","account","setAccount","signature","setSignature","error","setError","chainId","setChainId","network","setNetwork","message","setMessage","signedMessage","setSignedMessage","verified","setVerified","connectWallet","connect","providers","Web3Provider","accounts","listAccounts","getNetwork","handleNetwork","e","id","target","value","Number","switchNetwork","toNetworkId","request","method","params","switchError","code","refreshState","undefined","disconnect","clearCachedProvider","cachedProvider","on","handleAccountsChanged","console","log","handleChainChanged","_hexChainId","handleDisconnect","removeListener"],"sources":["E:/New folder (44)/ico-page-react/src/components/Wallet/index.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { networkParams } from \"./networks\";\r\nimport { toHex, truncateAddress } from \"../../utils/addressUtils\";\r\nimport { ethers } from \"ethers\";\r\nimport Web3Modal from \"web3modal\";\r\nimport { providerOptions } from \"./providerOptions\";\r\n\r\nconst web3Modal = new Web3Modal({\r\n  cacheProvider: true, // optional\r\n  providerOptions // required\r\n});\r\n\r\nexport default function Wallet(props) {\r\n  const [provider, setProvider] = useState();\r\n  const [library, setLibrary] = useState();\r\n  const [account, setAccount] = useState(props.account);\r\n  const [signature, setSignature] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [chainId, setChainId] = useState(props.chainId);\r\n  const [network, setNetwork] = useState();\r\n  const [message, setMessage] = useState(\"\");\r\n  const [signedMessage, setSignedMessage] = useState(\"\");\r\n  const [verified, setVerified] = useState();\r\n\r\n  const connectWallet = async () => {\r\n    try {\r\n      const provider = await web3Modal.connect();\r\n      const library = new ethers.providers.Web3Provider(provider);\r\n      const accounts = await library.listAccounts();\r\n      const network = await library.getNetwork();\r\n      setProvider(provider);\r\n      setLibrary(library);\r\n      if (accounts) setAccount(accounts[0]);\r\n      setChainId(network.chainId);\r\n    } catch (error) {\r\n      setError(error);\r\n    }\r\n  };\r\n\r\n  const handleNetwork = (e) => {\r\n    const id = e.target.value;\r\n    setNetwork(Number(id));\r\n  };\r\n\r\n  //   const handleInput = (e) => {\r\n  //     const msg = e.target.value;\r\n  //     setMessage(msg);\r\n  //   };\r\n\r\n  const switchNetwork = async () => {\r\n    const toNetworkId = 97;\r\n    try {\r\n      await library.provider.request({\r\n        method: \"wallet_switchEthereumChain\",\r\n        params: [{ chainId: toHex(toNetworkId) }]\r\n      });\r\n      setChainId(toNetworkId);\r\n\r\n    } catch (switchError) {\r\n      if (switchError.code === 4902) {\r\n        try {\r\n          await library.provider.request({\r\n            method: \"wallet_addEthereumChain\",\r\n            params: [networkParams[toHex(toNetworkId)]]\r\n          });\r\n        } catch (error) {\r\n          setError(error);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  //   const signMessage = async () => {\r\n  //     if (!library) return;\r\n  //     try {\r\n  //       const signature = await library.provider.request({\r\n  //         method: \"personal_sign\",\r\n  //         params: [message, account]\r\n  //       });\r\n  //       setSignedMessage(message);\r\n  //       setSignature(signature);\r\n  //     } catch (error) {\r\n  //       setError(error);\r\n  //     }\r\n  //   };\r\n\r\n  //   const verifyMessage = async () => {\r\n  //     if (!library) return;\r\n  //     try {\r\n  //       const verify = await library.provider.request({\r\n  //         method: \"personal_ecRecover\",\r\n  //         params: [signedMessage, signature]\r\n  //       });\r\n  //       setVerified(verify === account.toLowerCase());\r\n  //     } catch (error) {\r\n  //       setError(error);\r\n  //     }\r\n  //   };\r\n\r\n  const refreshState = () => {\r\n    setAccount();\r\n    setChainId();\r\n    setNetwork(\"\");\r\n    setMessage(\"\");\r\n    setSignature(\"\");\r\n    setVerified(undefined);\r\n  };\r\n\r\n  const disconnect = async () => {\r\n    web3Modal.clearCachedProvider();\r\n    refreshState();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (web3Modal.cachedProvider) {\r\n      connectWallet();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    props.setAccount(account);\r\n  }, [account]);\r\n\r\n  useEffect(() => {\r\n    props.setChainId(chainId);\r\n  }, [chainId]);\r\n\r\n  useEffect(() => {\r\n    if (provider?.on) {\r\n      const handleAccountsChanged = (accounts) => {\r\n        console.log(\"accountsChanged\", accounts);\r\n        if (accounts) setAccount(accounts[0]);\r\n      };\r\n\r\n      const handleChainChanged = (_hexChainId) => {\r\n        setChainId(_hexChainId);\r\n        console.log(\"Chain:\",chainId);\r\n      };\r\n\r\n      const handleDisconnect = () => {\r\n        console.log(\"disconnect\", error);\r\n        disconnect();\r\n      };\r\n\r\n      provider.on(\"accountsChanged\", handleAccountsChanged);\r\n      provider.on(\"chainChanged\", handleChainChanged);\r\n      provider.on(\"disconnect\", handleDisconnect);\r\n\r\n      return () => {\r\n        if (provider.removeListener) {\r\n          provider.removeListener(\"accountsChanged\", handleAccountsChanged);\r\n          provider.removeListener(\"chainChanged\", handleChainChanged);\r\n          provider.removeListener(\"disconnect\", handleDisconnect);\r\n        }\r\n      };\r\n    }\r\n  }, [provider]);\r\n\r\n  return (\r\n    <div>\r\n      {!account ? (\r\n        <a onClick={connectWallet}>Connect Wallet</a>\r\n      ) : (\r\n        chainId===  0x61 ?\r\n        <a onClick={disconnect}>Disconnect</a>:\r\n        <a onClick={switchNetwork}>Wrong Network</a>\r\n      )}\r\n\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}